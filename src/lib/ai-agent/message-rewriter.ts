import { generateText } from 'ai';
import { createLLMModelWithFallback } from './config';
import type { LLMConfig } from './config';



/**
 * Reescreve mensagens do usu√°rio para melhorar a clareza e efic√°cia das tool calls
 */
export async function rewriteUserMessage(
  userMessage: string,
  llmConfig?: LLMConfig
): Promise<string> {
  try {
    console.log('üîÑ [Message Rewriter] Reescrevendo mensagem do usu√°rio:', userMessage);
    
    const llmModel = await createLLMModelWithFallback(llmConfig);
    
    const rewritePrompt = `Voc√™ √© um assistente especializado em reescrever mensagens de usu√°rios para melhorar a clareza e efic√°cia das solicita√ß√µes em uma farm√°cia online.

**Sua tarefa:**
- Reescrever a mensagem do usu√°rio de forma mais clara e espec√≠fica
- Manter a inten√ß√£o original do usu√°rio
- Tornar expl√≠citas as a√ß√µes que o usu√°rio deseja (buscar, adicionar ao carrinho, etc.)
- Usar termos farmac√™uticos corretos quando apropriado
- Ser conciso mas completo

**Exemplos:**
Usu√°rio: "quero remedio pra dor"
Reescrita: "Preciso de medicamentos para al√≠vio da dor. Por favor, mostre as op√ß√µes dispon√≠veis."

Usu√°rio: "adiciona 2 dipirona"
Reescrita: "Adicione 2 unidades de Dipirona ao meu carrinho de compras."

Usu√°rio: "tem acido folico?"
Reescrita: "Voc√™s t√™m √°cido f√≥lico dispon√≠vel? Gostaria de ver as op√ß√µes."

**Regras importantes:**
- Se a mensagem j√° est√° clara, retorne-a sem altera√ß√µes
- N√£o adicione informa√ß√µes que o usu√°rio n√£o mencionou
- Mantenha o tom natural e amig√°vel
- Se houver ambiguidade, mantenha a interpreta√ß√£o mais prov√°vel

**Mensagem do usu√°rio para reescrever:**
"${userMessage}"

**Responda APENAS com a mensagem reescrita, sem explica√ß√µes adicionais.**`;

    const result = await generateText({
      model: llmModel,
      prompt: rewritePrompt,
      temperature: 0.3, // Temperatura baixa para consist√™ncia
    });

    const rewrittenMessage = result.text.trim();
    
    // Se a reescrita for muito similar ou vazia, usar a original
    if (!rewrittenMessage || rewrittenMessage.length < 3) {
      console.log('‚ö†Ô∏è [Message Rewriter] Reescrita inv√°lida, usando mensagem original');
      return userMessage;
    }
    
    console.log('‚úÖ [Message Rewriter] Mensagem reescrita:', rewrittenMessage);
    return rewrittenMessage;
    
  } catch (error) {
    console.error('‚ùå [Message Rewriter] Erro ao reescrever mensagem:', error);
    // Em caso de erro, retornar a mensagem original
    return userMessage;
  }
}

/**
 * Verifica se uma mensagem precisa ser reescrita
 */
export function shouldRewriteMessage(message: string): boolean {
  const lowercaseMessage = message.toLowerCase().trim();
  
  // Crit√©rios para reescrita
  const needsRewriting = (
    // Mensagens muito curtas ou vagas
    lowercaseMessage.length < 10 ||
    // Mensagens com muitas abrevia√ß√µes
    /\b(q|vc|pq|tb|tbm)\b/.test(lowercaseMessage) ||
    // Mensagens sem pontua√ß√£o e muito informais
    (!/[.!?]/.test(message) && lowercaseMessage.length > 5) ||
    // Mensagens com erros de digita√ß√£o comuns
    /\b(remedio|farmacia|medico)\b/.test(lowercaseMessage)
  );
  
  return needsRewriting;
}

/**
 * Reescreve mensagem apenas se necess√°rio
 */
export async function conditionalRewriteMessage(
  userMessage: string,
  llmConfig?: LLMConfig
): Promise<{ message: string; wasRewritten: boolean }> {
  if (shouldRewriteMessage(userMessage)) {
    const rewritten = await rewriteUserMessage(userMessage, llmConfig);
    return {
      message: rewritten,
      wasRewritten: rewritten !== userMessage
    };
  }
  
  return {
    message: userMessage,
    wasRewritten: false
  };
}