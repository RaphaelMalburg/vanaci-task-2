// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id           String  @id @default(cuid())
  name         String
  description  String?
  category     String
  price        Float
  stock        Int
  prescription Boolean @default(false)
  manufacturer String?
  image        String? // Caminho da imagem no diret칩rio public
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ChatSession {
  id        String   @id @default(cuid())
  sessionId String   @unique
  context   Json?    // Armazena contexto como cartId, userId, currentPage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  ChatMessage[]
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  userId    String?     // ID do usu치rio que enviou a mensagem (opcional para compatibilidade)
  role      String      // 'user', 'assistant', 'system'
  content   String
  toolCalls Json?       // Armazena tool calls se houver
  timestamp DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
}

model User {
  id        String        @id @default(cuid())
  username  String        @unique
  password  String        // Senha em texto simples para simplicidade (POC)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  carts     UserCart[]
  messages  ChatMessage[] // Mensagens de chat do usu치rio
}

model UserCart {
  id        String           @id @default(cuid())
  userId    String
  items     UserCartItem[]
  total     Float            @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId]) // Um carrinho por usu치rio
}

model UserCartItem {
  id         String   @id @default(cuid())
  cartId     String
  productId  String
  name       String
  price      Float
  quantity   Int
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cart       UserCart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) // Evita duplicatas do mesmo produto no carrinho
}
